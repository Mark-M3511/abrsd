<?php

/**
 * @file abrsd_user_registration.module
 * This module is used to create/update a custom user registration form.
 */


use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\abrsd_user_registration\Plugin\WebformHandler\UserRegistration;
use Drupal\user\Entity\User;
use Drupal\Core\Link;
use Drupal\Core\Url;

Drupal::moduleHandler()->loadInclude('abrsd_user_registration', 'inc', 'inc/abrsd_user_registration.functions');

/**
 * Implements hook_help().
 * @param string $route_name
 * @param RouteMatchInterface $route_match
 * @return string
 */
function abrsd_user_registration_help($route_name, RouteMatchInterface $route_match)
{
    $help = '';
    switch ($route_name) {
            // Main module help for the abrsd_user_registration module.
        case 'help.page.abrsd_user_registration':
            $help .= '<p>' . t('This module is used to create/update a custom user registration form.') . '</p>';
            break;
            // Module-specific help for another route.
        case 'abrsd_user_registration.some_route':
            $help .= '<p>' . t('Description of some feature of the abrsd_user_registration module.') . '</p>';
            break;
        default:
            break;
    }
    return $help;
}


/**
 * Implements hook_form_alter().
 *
 * Alters the form elements and form state for the 'webform_submission_user_profile_add_form' form.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 * @param string $form_id
 *   The ID of the form being altered.
 */
function abrsd_user_registration_form_alter(array &$form, FormStateInterface &$form_state, $form_id)
{
    try {
        if (!empty($form['#webform_id'])) {
            $form['#attached']['library'][] = 'abrsd_user_registration/abrsd_user_registration';
            $form['#attached']['drupalSettings']['abrsd_user_registration']['serverTime'] = date('F j, Y \a\t g:i a', time());
            if (($form['#webform_id'] == 'user_profile')) {
                // Load the logged in user
                $user = User::load(\Drupal::currentUser()->id());
                // Load the custom UserRegistration service and load the user profile
                if (!empty($user) && !empty($form['elements'])) {
                    // Load the custom UserRegistration service
                    $sid = UserRegistration::getSubmissionId($user->id());
                    // Load the profile form values if $form array is not empty and $form elements are set
                    _abrsd_user_registration_load_profile_form_values($form['elements'], $form_state, $sid, $user);
                }
            } else if ($form['#webform_id'] == 'user_registration') {
                // Get the last updated time of the user object
                $mark_up = _get_custom_form_markup(time(), t('Registration created') . ': ');
                // Add last updated markup to the form just above the submit button
                $form['actions']['submit']['#prefix'] = $mark_up;
                // Do not cache the form
                // $form['#cache'] = ['max-age' => 0];
            }
        } else if ($form_id === "comment_blog_comment_form") {
            // Changes the text of the Save button to Share
            $form['actions']['submit']['#value'] = t('Share');
            // Hide the preview button
            $form['actions']['preview']['#access'] = FALSE;
            // Remove the format selector
            $form['comment_body']['widget']['#after_build'][] = '_modify_format_selector_ui';
        } else if ($form_id === 'user_login_form') {
            // Change the wording of the Username label to Email Address
            $form['name']['#title'] = t('Email Address');
            // Add a link to the password reset form.
            $form['actions']['password_reset'] = [
                '#type' => 'markup',
                '#markup' => Link::fromTextAndUrl(
                    t('Reset password'),
                    Url::fromRoute('user.pass', [], [
                        'attributes' => [
                            'class' => [
                                'form-submit',
                                'password-reset-link',
                                'ms-2',
                            ],
                        ],
                    ])
                )->toString(),
                '#weight' => 99, // Adjust this to position the link correctly.
            ];
        } else if ($form_id === 'user_form') {
            // Hide the email field
            $form['account']['mail']['#access'] = FALSE;
        } else if ($form_id === 'user_pass') {
            _abrsd_user_registration_user_pass_config($form, $form_state);
        }
    } catch (\Exception $e) {
        // Log any errors
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }
}

/**
 * Implements hook_form_FORM_ID_alter() for the user form.
 *
 * This function is called when altering the user form. It checks if the current user has
 * the Comment Contributor role and hides certain fields based on that role.
 *
 * @param array &$form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface &$form_state
 *   The form state object.
 * @param string $form_id
 *   The form ID.
 *
 * @throws \Exception
 *   If an error occurs during the process.
 */
function abrsd_user_registration_form_user_form_alter(
    array &$form,
    FormStateInterface &$form_state,
    string $form_id
) {
    try {
        // Does the current user have the Comment Contributor role
        $user = User::load(\Drupal::currentUser()->id());
        if (!empty($user)) {
            $roles = $user->getRoles();
            if (in_array('comment_contributor', $roles)) {
                // Hide some fields provided by core
                $form['user_picture']['#access'] = FALSE;
                $form['language']['#access'] = FALSE;
                $form['timezone']['#access'] = FALSE;
                // Hide the contact field - this is a core form field set in the contact.module
                // See this projects .install file more information
                $form['contact']['#access'] = FALSE;
                // Hide custom fields
                $form['field_display_name']['#access'] = FALSE;
                $form['field_first_name']['#access'] = FALSE;
                $form['field_last_name']['#access'] = FALSE;
                $form['field_country']['#access'] = FALSE;
                $form['field_organization']['#access'] = FALSE;
                $form['field_about_me']['#access'] = FALSE;
                $form['field_interests']['#access'] = FALSE;
                $form['field_province_state']['#access'] = FALSE;
                $form['field_postal_zip_code']['#access'] = FALSE;
            }
        }
    } catch (\Exception $e) {
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }
}

/**
 * Implements hook_tokens_info().
 *
 * This function is called to provide information about the tokens provided by the module.
 *
 * @return array
 *   An array of token information.
 */
function abrsd_user_registration_token_info()
{
    $info = [];

    // Define the user_display_name_with_fallback token
    $info['tokens']['user']['user_display_name_with_fallback'] = [
        'name' => t('User Display Name with Fallback'),
        'description' => t('Provides the user entered display name or their Drupal user name as fallback.'),
    ];

    return $info;
}

/**
 * Implements hook_tokens().
 *
 * This function is called to replace tokens with values.
 *
 * @param string $type
 *   The type of token.
 * @param array $tokens
 *   An array of tokens.
 * @param array $data
 *   An array of data.
 * @param array $options
 *   An array of options.
 *
 * @return array
 *   An array of token replacements.
 */
function abrsd_user_registration_tokens($type, $tokens, array $data = [], array $options = [])
{
    $replacements = [];

    // Check if the type is user and the data array contains a user object
    if ($type == 'user' && isset($data['user']) && $data['user'] instanceof User) {
        $user = $data['user'];
        foreach ($tokens as $name => $original) {
            switch ($name) {
                case 'user_display_name_with_fallback':
                    $user = User::load($user->id());
                    $display_name = $user->get('field_display_name')->value;
                    $replacements[$original] = !empty($display_name) ? $display_name : _generate_unique_username($user->getAccountName());
                    break;
            }
        }
    }

    return $replacements;
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Adds the 'abrsd_user_docs/modal_node.content' library to the page attachments.
 *
 * This function is called when Drupal is preparing the attachments for a page.
 * It allows modules to alter the attachments array before it is rendered.
 *
 * @param array $attachments
 *   The attachments array containing the page attachments.
 */
function abrsd_user_registration_page_attachments_alter(array &$attachments)
{
    // Get the current node path.
    $current_path = \Drupal::service('path.current')->getPath();
    // Get the alias of the current node path.
    $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
    // If the path starts with 'blog' then add the library.
    if (strpos($current_path_alias, '/blog') === 0) {
        // If JSON API is enabled, add the library.
        if (\Drupal::moduleHandler()->moduleExists('jsonapi')) {
            $attachments['#attached']['library'][] = 'abrsd_user_registration/abrsd_user_info';
            $user = _abrsd_user_registration_load_api_user_credentials(['api_accessor_read']);
            if (!empty($user)) {
                // Add the API user name to the page attachments via drupalSettings.
                $api_credentials = &$attachments['#attached']['drupalSettings']['abrsd_user_registration'];
                $api_credentials['apiUser'] = $user->getAccountName();
                $api_token = _abrsd_user_registration_get_api_key();
                if (!empty($api_token)) {
                    // Add the API token to the page attachments via drupalSettings.
                    $api_credentials['apiToken'] = $api_token;
                }
                // Add the API base URL to the page attachments via drupalSettings.
                $api_credentials['apiBaseUrl'] = _abrsd_user_registration_jsonapi_base_path();
            }
        }
    }
}


/**
 * Loads the API user credentials for a given role.
 *
 * @param array $roles
 *   An array of roles to search for.
 *
 * @return \Drupal\user\Entity\User|null
 *   The API user entity if found, or null if not found.
 *
 * @throws \Exception
 *  If an error occurs while loading the API user credentials.
 */
function _abrsd_user_registration_load_api_user_credentials(array $roles): ?User
{
    try {
        $api_user = NULL;
        $query = \Drupal::entityQuery('user')->accessCheck(FALSE)
            ->condition('roles', $roles, 'IN')
            ->condition('status', 1)
            ->range(0, 1);
        $uids = $query->execute();
        if (!empty($uids)) {
            $api_user = User::load(array_shift($uids));
        }
    } catch (\Exception $e) {
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }
    return $api_user;
}


/**
 * Retrieves the API key from the configuration.
 *
 * @return string
 *   The API token.
 *
 * @throws \Exception
 *   If an error occurs while retrieving the API token.
 */
function _abrsd_user_registration_get_api_key(): string
{
    try {
        $config = \Drupal::config('rest_api_authentication.settings');
        $result = $config->get('api_token');
    } catch (\Exception $e) {
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }
    return $result;
}

/**
 * Retrieves the JSON API base path for the custom module.
 *
 * @return string
 *   The JSON API base path.
 *
 * @throws \Exception
 *   If an error occurs while retrieving the JSON API base path.
 */
function _abrsd_user_registration_jsonapi_base_path(): string
{
    try {
        // Add the API base URL to the page attachments via drupalSettings.
        $result  = 'jsonapi';
        // 1. Get the Drupal global container.
        $container = \Drupal::getContainer();
        // 2. Get the JSON API base path parameter.
        $result = $container->getParameter('jsonapi.base_path');
        if (!empty($jsonapi_base_path)) {
            $result = "$result/user/user";
        }
    } catch (\Exception $e) {
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }
    // 3. Add the API base URL to the page attachments via drupalSettings.
    return $result;
}
