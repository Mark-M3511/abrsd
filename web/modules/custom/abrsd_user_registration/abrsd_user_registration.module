<?php

/**
 * @file abrsd_user_registration.module
 * This module is used to create/update a custom user registration form.
 */


use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\Utility\WebformFormHelper;
use Drupal\abrsd_user_registration\Plugin\WebformHandler\UserRegistration;
use Drupal\user\Entity\User;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;

/**
 * Implements hook_help().
 * @param string $route_name
 * @param RouteMatchInterface $route_match
 * @return string
 */
function abrsd_user_registration_help($route_name, RouteMatchInterface $route_match)
{
    $help = '';
    switch ($route_name) {
            // Main module help for the abrsd_user_registration module.
        case 'help.page.abrsd_user_registration':
            $help .= '<p>' . t('This module is used to create/update a custom user registration form.') . '</p>';
            break;

            // Module-specific help for another route.
        case 'abrsd_user_registration.some_route':
            $help .= '<p>' . t('Description of some feature of the abrsd_user_registration module.') . '</p>';
            break;
        default:
            break;
    }
    return $help;
}


/**
 * Implements hook_form_alter().
 *
 * Alters the form elements and form state for the 'webform_submission_user_profile_add_form' form.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 * @param string $form_id
 *   The ID of the form being altered.
 */
function abrsd_user_registration_form_alter(&$form, FormStateInterface &$form_state, $form_id)
{
    try {
        if (!empty($form['#webform_id']) && ($form['#webform_id'] == 'user_profile')) {
            $form['#attached']['library'][] = 'abrsd_user_registration/abrsd_user_registration';
            // Load the logged in user
            // $user = User::load(\Drupal::currentUser()->id());
            $user = User::load(14);
            if (!empty($user)) {
                // Load the custom UserRegistration service
                $sid = UserRegistration::getSubmissionId($user->id());
                if (!empty($sid)) {
                    // Load the submission from the webform entity
                    $submission = WebformSubmission::load($sid);
                    // Element data
                    $submission_data = $submission->getData();
                    // Test
                    // $fe = &WebformFormHelper::flattenElements($form['elements']);
                    // Get a refernce to the form elements array
                    $fe = &$form['elements'];
                    // Add first name
                    $fe['first_name']['#default_value'] = $submission_data['first_name'];
                    // Add last name
                    $fe['last_name']['#default_value'] = $submission_data['last_name'];
                    // Add country
                    $fe['country']['#default_value'] = $submission_data['country'];
                    // Add email
                    $fe['signup_email']['#default_value'] = $submission_data['signup_email'];
                    // Add organization
                    $fe['organization']['#default_value'] = $submission_data['organization'];
                    // Add interests
                    $fe['interests']['#default_value'] = $submission_data['interests'];
                    // Add about_me
                    $fe['about_me']['#default_value'] = $submission_data['about_me'];
                    // Add display name
                    $fe['display_name']['#default_value'] = $submission_data['display_name'];
                    // Check if the profile picture has been removed
                    $user_pic_removed = _abrsd_user_registration_user_picture_removed($form_state);
                    // If the profile picture is not empty add the profile picture display
                    $fe['profile_picture']['#default_value'] = [$submission_data['profile_picture']];
                    // Add the webform submission ID
                    $file_url = _abrsd_user_registration_user_picture($user);
                    // Add the profile picture display
                    $fe['profile_picture_display'] = [
                        '#type' => 'inline_template',
                        '#template' => '<img src="{{ url }}" class="{{ css_class }}" alt="Profile picture" />',
                        '#context' => [
                            'url' => $file_url,
                            'css_class' => $user_pic_removed ? 'hidden' : '',
                        ],
                        '#weight' => 0,
                        // '#access' => $user_pic_removed ? FALSE : TRUE,
                        '#prefix' => '<div id="profile-picture-display">',
                        '#suffix' => '</div>',
                    ];
                }
            }
        }
    } catch (\Exception $e) {
        // Log any errors
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }
}

/**
 * Get the user picture.
 *
 * @param int $uid
 *   The user ID.
 *
 * @return string|null
 *   The URL of the user picture if found, NULL otherwise.
 */
function _abrsd_user_registration_user_picture(User $user)
{
    $result = NULL;
    try {
        // Load the file entity
        $file = File::load($user->get('user_picture')->target_id);
        if ($file) {
            // Get the URL of the image with the desired style.
            $result = ImageStyle::load('thumbnail')->buildUrl($file->getFileUri());
        }
    } catch (\Exception $e) {
        // Log any errors
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }

    return $result;
}

function _abrsd_user_registration_user_picture_removed($form_state)
{
    $result = FALSE;
    try {
        // Check if the user picture has been removed
        $user_pic = $form_state->getValue('profile_picture');
        if (!empty($user_pic)) {
            $result  = empty($user_pic['fid']);
        }
    } catch (\Exception $e) {
        // Log any errors
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }

    return $result;
}
