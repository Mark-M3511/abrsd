<?php

/**
 * @file abrsd_user_registration.module
 * This module is used to create/update a custom user registration form.
 */


use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\webform\Entity\WebformSubmission;
use Drupal\Core\Form\FormStateInterface;
use Drupal\abrsd_user_registration\Plugin\WebformHandler\UserRegistration;
use Drupal\user\Entity\User;
use Drupal\file\Entity\File;
use Drupal\image\Entity\ImageStyle;
use Drupal\Core\Link;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 * @param string $route_name
 * @param RouteMatchInterface $route_match
 * @return string
 */
function abrsd_user_registration_help($route_name, RouteMatchInterface $route_match)
{
    $help = '';
    switch ($route_name) {
            // Main module help for the abrsd_user_registration module.
        case 'help.page.abrsd_user_registration':
            $help .= '<p>' . t('This module is used to create/update a custom user registration form.') . '</p>';
            break;

            // Module-specific help for another route.
        case 'abrsd_user_registration.some_route':
            $help .= '<p>' . t('Description of some feature of the abrsd_user_registration module.') . '</p>';
            break;
        default:
            break;
    }
    return $help;
}


/**
 * Implements hook_form_alter().
 *
 * Alters the form elements and form state for the 'webform_submission_user_profile_add_form' form.
 *
 * @param array $form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 * @param string $form_id
 *   The ID of the form being altered.
 */
function abrsd_user_registration_form_alter(&$form, FormStateInterface &$form_state, $form_id)
{
    try {
        if (!empty($form['#webform_id']) && ($form['#webform_id'] == 'user_profile')) {
            $form['#attached']['library'][] = 'abrsd_user_registration/abrsd_user_registration';
            // Load the logged in user
            $user = User::load(\Drupal::currentUser()->id());
            // $user = User::load(14);
            if (!empty($user)) {
                // Load the custom UserRegistration service
                $sid = UserRegistration::getSubmissionId($user->id());
                // Load the profile form values
                _abrsd_user_registration_load_profile_form_values($form['elements'], $form_state, $sid, $user);
            }
        } else if ($form_id === "comment_blog_comment_form") {
            // Changes the text of the Save button to Share
            $form['actions']['submit']['#value'] = t('Share');
            // Hide the preview button
            $form['actions']['preview']['#access'] = FALSE;
            // Remove the format selector
            $form['comment_body']['widget']['#after_build'][] = '_modify_format_selector_ui';
        } else if ($form_id === 'user_login_form') {
            // Add a link to the password reset form.
            $form['actions']['password_reset'] = [
                '#type' => 'markup',
                '#markup' => Link::fromTextAndUrl(
                    t('Reset password'),
                    Url::fromRoute('user.pass', [], [
                        'attributes' => [
                            'class' => [
                                'form-submit',
                                'password-reset-link',
                                'ms-2',
                            ],
                        ],
                    ])
                )->toString(),
                '#weight' => 99, // Adjust this to position the link correctly.
            ];
        }
    } catch (\Exception $e) {
        // Log any errors
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }
}

/**
 * Modifies the format selector UI element.
 *
 * This function is called to modify the format selector UI element in a form.
 * It removes the format, help, and guidelines elements and hides the format selector.
 *
 * @param array $element
 *   The form element to be modified.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current state of the form.
 *
 * @return array
 *   The modified form element.
 */
function _modify_format_selector_ui(array $element, FormStateInterface $form_state): array
{
    if (isset($element[0]['format'])) {
        $el = &$element[0]['format'];
        // Remove format, help, guidelines elements
        // unset($element[0]['format']['guidelines']);
        // unset($element[0]['format']['help']);

        // Hide the format selector
        $el['format']['#access'] = FALSE;
    }

    return $element;
}

/**
 * Loads the profile form values for a user registration.
 *
 * This function is responsible for loading the default values for the profile form
 * elements based on the submission data retrieved from a webform entity.
 *
 * @param array &$form_elements
 *   The array of form elements.
 * @param FormStateInterface &$form_state
 *   The form state object.
 * @param int|null $sid
 *   The submission ID.
 * @param User $user
 *   The user object.
 *
 * @throws \Exception
 *   If an error occurs during the process.
 */
function _abrsd_user_registration_load_profile_form_values(
    array &$form_elements,
    FormStateInterface &$form_state,
    ?int $sid,
    User $user
) {
    try {
        if (!empty($sid)) {
            // Load the submission from the webform entity
            $submission = WebformSubmission::load($sid);
            // Element data
            $submission_data = $submission->getData();
            // Define form elements
            $form_elements_keys = [
                'container|first_name', 'container|last_name', 'container|country',
                'container|signup_email', 'container|organization', 'container_01|interests',
                'container_01|about_me', 'container|display_name'
            ];
            // Set default values for form elements
            foreach ($form_elements_keys as $key) {
                setDefaultValue($form_elements, $submission_data, $user, $key);
            }
            // Check if the profile picture has been removed
            $user_pic_removed = _abrsd_user_registration_user_picture_removed($form_state);
            // If the profile picture is not empty add the profile picture display
            if (!empty($submission_data['profile_picture'])) {
                // Add the profile picture
                $form_elements['container']['container_02']['profile_picture']['#default_value'] = [$submission_data['profile_picture']];
                // Add the webform submission ID
                $file_url = _abrsd_user_registration_user_picture($user);
                // Add the profile picture display if $file_url is not null
                if (!empty($file_url)) {
                    $form_elements['container']['container_02']['profile_picture_display'] = [
                        '#type' => 'inline_template',
                        '#template' => '<img src="{{ url }}" class="{{ css_class }}" alt="Profile picture" />',
                        '#context' => [
                            'url' => $file_url,
                            'css_class' => $user_pic_removed ? 'hidden' : 'me-2',
                        ],
                        '#weight' => -1,
                        // '#access' => $user_pic_removed ? FALSE : TRUE,
                        '#prefix' => '<div id="profile-picture-display">',
                        '#suffix' => '</div>',
                    ];
                }
            }
        }
    } catch (\Exception $e) {
        // Log any errors
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }
}

/**
 * Sets the default value for a form element based on submission data or user field value.
 *
 * @param array &$form_elements
 *   The array of form elements.
 * @param array $submission_data
 *   The array of submission data.
 * @param User $user
 *   The User object.
 * @param string $key
 *   The key used to identify the form element.
 */
function setDefaultValue(array &$form_elements, array $submission_data, User $user, string $key)
{
    // Get the container and key
    $container = explode('|', $key)[0] ?? 'container';
    // Get the key
    $skey = explode('|', $key)[1] ?? $key;
    // Set the default value
    $form_elements[$container][$skey]['#default_value'] = $submission_data[$skey] ?? $user->{"field_$skey"}->value;
}

/**
 * Get the user picture.
 *
 * @param int $uid
 *   The user ID.
 *
 * @return string|null
 *   The URL of the user picture if found, NULL otherwise.
 */
function _abrsd_user_registration_user_picture(User $user): ?string
{
    $result = NULL;
    try {
        // Get the file ID of the user picture
        $fid = $user->get('user_picture')->target_id;
        // Load the file entity
        if (!empty($fid)) {
            $file = File::load($fid);
            if ($file) {
                // Get the URL of the image with the desired style.
                $result = ImageStyle::load('thumbnail')->buildUrl($file->getFileUri());
            }
        }
    } catch (\Exception $e) {
        // Log any errors
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }

    return $result;
}

/**
 * Checks if the user picture has been removed from the form.
 *
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The form state object.
 *
 * @return bool
 *   TRUE if the user picture has been removed, FALSE otherwise.
 */
function _abrsd_user_registration_user_picture_removed(FormStateInterface $form_state): bool
{
    $result = FALSE;
    try {
        // Check if the user picture has been removed
        $user_pic = $form_state->getValue('profile_picture');
        $result = is_array($user_pic) && !isset($user_pic['fid']);
    } catch (\Exception $e) {
        // Log any errors
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }

    return $result;
}

/**
 * Implements hook_form_FORM_ID_alter() for the user form.
 *
 * This function is called when altering the user form. It checks if the current user has
 * the Comment Contributor role and hides certain fields based on that role.
 *
 * @param array &$form
 *   The form array.
 * @param \Drupal\Core\Form\FormStateInterface &$form_state
 *   The form state object.
 * @param string $form_id
 *   The form ID.
 *
 * @throws \Exception
 *   If an error occurs during the process.
 */
function abrsd_user_registration_form_user_form_alter(
    array &$form,
    FormStateInterface &$form_state,
    string $form_id
) {
    try {
        // Does the current user have the Comment Contributor role
        $user = User::load(\Drupal::currentUser()->id());
        if (!empty($user)) {
            $roles = $user->getRoles();
            if (in_array('comment_contributor', $roles)) {
                // Hide some fields provided by core
                $form['user_picture']['#access'] = FALSE;
                $form['language']['#access'] = FALSE;
                $form['timezone']['#access'] = FALSE;
                // Hide the contact field - this is a core form field set in the contact.module
                // See this projects .install file more information
                $form['contact']['#access'] = FALSE;
                // Hide custom fields
                $form['field_display_name']['#access'] = FALSE;
                $form['field_first_name']['#access'] = FALSE;
                $form['field_last_name']['#access'] = FALSE;
                $form['field_country']['#access'] = FALSE;
                $form['field_organization']['#access'] = FALSE;
                $form['field_about_me']['#access'] = FALSE;
                $form['field_interests']['#access'] = FALSE;
            }
        }
    } catch (\Exception $e) {
        \Drupal::logger('abrsd_user_registration')->error($e->getMessage());
    }
}
