<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Url;
use \Drupal\views\Entity\View;
use \Drupal\Component\Utility\Html;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function abrsd_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
}

/**
 * Implements hook_preprocess_html().
 *
 * Add a class to the body based on the path alias of the current node.
 */
function abrsd_preprocess_html(&$variables)
{
  // Add a class to the body based on the path alias of the current node.
  $path_alias = _abrsd_get_current_path();
  $variables['attributes']['class'][] = 'page-' . str_replace('/', '-', $path_alias);
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * Add a theme suggestion for the page template based on the path alias of the current node.
 */
function abrsd_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  // Get the path alias of the current node
  $path_alias = _abrsd_get_current_path();
  // Change all - to _ in the path alias and remove the first / from the path alias.
  $path_alias = str_replace(['-', '/'], ['_', ''], $path_alias);
  // Create the new suggestion.
  $new_suggestion = 'page__node__' . $path_alias;
  // Splice the new suggestion into the suggestions array so it is the second suggestion.
  array_splice($suggestions, 1, 0, $new_suggestion);
}

/**
 * Implements hook_theme_suggestions_node_alter().
 *
 * Add a theme suggestion for the node template based on the path alias of the current node.
 */
function abrsd_theme_suggestions_node_alter(array &$suggestions, array $variables)
{
  // Get the noide of the current node object
  $node = isset($variables['elements']['#node'])
    ? $variables['elements']['#node']
    : \Drupal::routeMatch()->getParameter('node');
  // If not a revision, get the node id.
  if (is_object($node)) {
    // Get the path alias of the current node
    $path_alias = Url::fromRoute('entity.node.canonical', ['node' => (int)$node->id()])->toString();
    // Change all - to _ in the path alias and remove the first / from the path alias.
    $path_alias = str_replace(['-', '/'], ['_', ''], $path_alias);
    // Create the new suggestion.
    $new_suggestion = 'node__' . $path_alias . '__full';
    // Splice the new suggestion into the suggestions array so it is the second suggestion.
    array_splice($suggestions, 3, 0, $new_suggestion);
    // Check if path alias contains the string 'working-group' and new suggestion if it does.
    if (strpos($path_alias, 'working_group') !== FALSE) {
      // Create the new suggestion.
      $new_suggestion = 'node__working_group__full';
      // Splice the new suggestion into the suggestions array so it is the second suggestion.
      array_splice($suggestions, 3, 0, $new_suggestion);
    }
  }
}

/**
 * Implements template_preprocess_block().
 *
 * Provide filtered news items to the block template.
 */
function abrsd_preprocess_block(&$variables)
{
  if ($variables['plugin_id'] == 'block_content:80e4ec90-a2e5-4760-b2e0-fb760bc393fe') {
    // Build the News List content block.
    _abrsd_preprocess_block_news($variables);
    // Ensure the News List content block is rebuilt when the topic is changed.
    $variables['#cache']['contexts'][] = 'url.query_args:topic';
  }
}

/**
 * Provide filtered news items to the block template.
 */
function _abrsd_preprocess_block_news(&$variables)
{
  //  Get a view by machine name
  $view = \Drupal::entityTypeManager()
    ->getStorage('view')
    ->load('news');
  // Get the query parameters
  $query = \Drupal::request()->query->all();
  $tname = isset($query['topic']) ? $query['topic'] : '';
  // Sanitize the taxonomy term name
  $tname = Html::escape($tname);
  // Replace - with space in $tname
  $tname = str_replace('-', ' ', $tname);
  // Get the taxonomy term by label
  $topic = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['name' => $tname]);
  // Get the first taxonomy term
  if (is_array($topic)) {
    $topic = reset($topic);
  }
  // Get the taxonomy term id
  $tid = 0;
  if (is_object($topic)) {
    $tid = $topic->id();
  }
  // Get executable view
  $executable_view = $view->getExecutable();
  // Get the display
  $executable_view->setDisplay('block_6');
  // Set the arguments
  if (!empty($tid)) {
    $executable_view->setArguments([$tid]);
  }
  // Execute the view
  $executed = $executable_view->execute();
  // Initialize the nodes array
  $variables['nodes'] = [];
  // Get the results
  if ($executed && !empty($executable_view->result)) {
    foreach ($executable_view->result as $result) {
      // Add the node to the variables array
      $variables['nodes'][] = $result->_entity;
      // Get the current node
      $current = end($variables['nodes']);
      // Format $current->changed_at for display as YYYY-MM-DDTHH:MM:SS+00:00 (e.g. 2019-01-01T00:00:00+00:00)
      $current->changed_at = date('c', $current->changed->value);
      // Format $current->changed_at for display as YYYY-MMM-DD (e.g. 2019-Jan-01)
      $current->changed_at = date('Y-M-d', strtotime($current->changed_at));
      // Calculate time ago for a given date
      $current->changed_ago = \Drupal::service('date.formatter')->formatTimeDiffSince(
        $current->changed->value,
        ['granularity' => 1]
      );
      $current->changed_ago .= ' ago';
      // Get the taxonomy term for the news item topic
      $current->topic = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($current->field_topic->target_id);
      $current->tid = $current->topic->id();
      $current->topic_label = $current->topic->label();
    }
  }
}

/**
 * Implements hook_preprocess_node().
 *
 * Provide filtered news items to the view template.
 */
function abrsd_preprocess_node(&$variables)
{
  $node = $variables['node'];
  if ($node->getType() == 'base_layout_page' && $node->getTitle() == '400 Error') {
    _abrsd_preprocess_node_resource($variables);
    return;
  }
  // Check for node of type workshop
  if ($node->getType() == 'workshop') {
    // Get the websites timezone
    $timezone = \Drupal::config('system.date')->get('timezone.default');
    // Add the timezone to the list of variables
    $variables['timezone'] = $timezone;
    // Get the referring path or url
    $referer = \Drupal::request()->headers->get('referer');
    // Get path portion of the url
    $referer = parse_url($referer, PHP_URL_PATH);
    // Add the referring path or url to the variables array
    $variables['referer'] = $referer;
  }
}

/**
 * Get a resource item from the resource content type.
 *
 * @param array $variables - The variables array passed to the template.
 * @return void
 */
function _abrsd_preprocess_node_resource(&$variables)
{
  // Create an array of 3 Resource titles
  $resource_titles = [
    'Our Work (Homepage CTA)',
    'Resources (Homepage CTA)',
    'Get Involved (Homepage CTA)',
  ];

  // Initialize object of type Random/Randomizer
  $random = new Random\Randomizer();
  // Get a Random integer between 0 and 2
  $random_int = $random->getInt(0, 2);
  // Get a random value from the $resource_titles array
  $random_title = $resource_titles[$random_int];
  // Get a Resource node by title
  $node = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties([
    'type' => 'resource',
    'title' => $random_title,
  ]);
  // Initialize the array of nodes
  $reco_nodes = [];
  // Check if the node is not empty and add it to the reco_nodes array
  if (!empty($node)) {
    // Get the first node from the array
    $node = reset($node);
    // Add the node to the reco_nodes array
    $reco_nodes[] = $node;
    // Add the reco_nodes array to the variables array
    $variables['reco_nodes'] = $reco_nodes;
    // Prevent the page from being cached.
    $variables['#cache']['max-age'] = 0;
  }
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 *
 * Add the current node id to the view template.
 * @param array $variables - The variables array passed to the template.
 * @return void
 */
function abrsd_preprocess_views_view_unformatted(&$variables)
{
  // Get the id of the current view
  $view_id = $variables['view']->id();
  // Check if the current view_id is in an array of view ids
  if (in_array($view_id, ['working_group_list'])) {
    // Get the current node id
    $nid = \Drupal::routeMatch()->getParameter('node')->id();
    // Add the current node id to the variables array
    $variables['nid'] = $nid;
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Add the status-msg library to the contact-us page.
 * @param array $variables - The variables array passed to the template.
 * @return void
 */
function abrsd_page_attachments_alter(&$variables)
{
  // Get the current path
  $path_alias = _abrsd_get_current_path();
  // Check if the current path is the contact-us page
  if (!empty($path_alias) && $path_alias == '/contact-us') {
    // Attach the status-msg library
    $variables['#attached']['library'][] = 'abrsd/status-msg';
  }
}

/**
 * Implements hook_preprocess_status_messages().
 *
 * Add the is_contact_page variable to the status messages template.
 * @param array $variables - The variables array passed to the template.
 * @return void
 */
function abrsd_preprocess_status_messages(&$variables)
{
  // Initialize the is_contact_page variable
  $variables['is_contact_page'] = TRUE;
  // Get the current path
  $path = _abrsd_get_current_path();
  // Check if the current path is the contact-us page
  if (!empty($path) && $path == '/contact-us') {
    // Add the status-msg class to the variables array
    $variables['is_contact_page'] = TRUE;
  }
}

/**
 * Helper function to get the current path.
 *
 * @return string - The path alias for the current page.
 */
function _abrsd_get_current_path()
{
  // Get the current path
  $current_path = \Drupal::service('path.current')->getPath();
  // Get the current path alias
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  // Return the current path alias
  return $current_path_alias;
}
