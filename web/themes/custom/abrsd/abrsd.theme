<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\views\Views;
use Drupal\Component\Utility\Html;
use Drupal\Component\Utility\Xss;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\Core\Site\Settings;
use Drupal\user\Entity\User;
use Drupal\node\Entity\Node;
use Drupal\taxonomy\Entity\Term;
use Drupal\node\NodeInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function abrsd_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
}

/**
 * Implements hook_preprocess_html().
 *
 * Add a class to the body based on the path alias of the current node.
 */
function abrsd_preprocess_html(array &$variables)
{
  // Add a class to the body based on the path alias of the current node.
  $path_alias = _abrsd_get_current_path();
  $variables['attributes']['class'][] = 'page-' . str_replace('/', '-', $path_alias);
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * Add a theme suggestion for the page template based on the path alias of the current node.
 */
function abrsd_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  // Get the path alias of the current node
  $path_alias = _abrsd_get_current_path();
  // Remove the first / from the path alias.
  $path_alias = ltrim($path_alias, '/');
  // Change all - to _ in the path alias
  $path_alias = str_replace(['-', '/'], ['_', '__'], $path_alias);
  // Create the new suggestion.
  $new_suggestion = 'page__node__' . $path_alias;
  // Splice the new suggestion into the suggestions array so it is the second suggestion.
  array_splice($suggestions, 1, 0, $new_suggestion);
}

/**
 * Implements hook_theme_suggestions_node_alter().
 *
 * Add a theme suggestion for the node template based on the path alias of the current node.
 */
function abrsd_theme_suggestions_node_alter(array &$suggestions, array $variables)
{
  $node = $variables['elements']['#node'] ?? \Drupal::routeMatch()->getParameter('node');

  // Check if $node is an object
  if (is_object($node)) {
    // Get the path alias of the current node
    $path_alias = ltrim(Url::fromRoute('entity.node.canonical', ['node' => $node->id()])->toString(), '/');
    // Replace '-' and '/' with '_' and '__' respectively in the path alias
    $path_alias = str_replace(['-', '/'], ['_', '__'], $path_alias);

    // Split the path alias into parts
    $path_parts = explode('__', $path_alias);
    // Iterate through the path parts
    while (!empty($path_parts)) {
      // Create a new suggestion for the node template
      $new_suggestion = 'node__' . implode('__', $path_parts) . '__full';
      // Insert the new suggestion into the suggestions array at index 3
      array_splice($suggestions, 3, 0, $new_suggestion);
      // Remove the last path part
      array_pop($path_parts);
    }
  }
}

/**
 * Implements hook_theme_suggestions_image_alter().
 *
 * Add a theme suggestion for images based on the image style name.
 */
function abrsd_theme_suggestions_image_alter(array &$suggestions, array $variables)
{
  // If the image being processed is the blog hero image, add a theme suggestion
  $style_name = $variables['style_name'] ?? '';
  switch ($style_name) {
    case 'blog_hero_banner_large':
      $suggestions[] = 'image__blog_hero__full';
      break;
    case 'login_feature_image':
      $suggestions[] = 'image__login_image__full';
      break;
    default:
      // Default case
      break;
  }
}

/**
 * Implements hook_theme_suggestions_block_alter().
 *
 * Add a theme suggestions for blocks based on the block id.
 */
function abrsd_theme_suggestions_block_alter(array &$suggestions, array $variables)
{
  // Get the block id
  $block = $variables['elements']['#configuration']['id'];
  // Get the current route name
  $current_route_name = \Drupal::routeMatch()->getRouteName();
  // Check if the block is the main content block
  if ($block == 'system_main_block') {
    // Add a theme suggestion for the main content block based on the current route
    switch ($current_route_name) {
      case 'user.login':
        $suggestions[] = 'block__abrsd_content__user_login';
        break;
      case 'user.pass':
        $suggestions[] = 'block__abrsd_content__user_pass_reset';
        break;
      case 'user.reset.form':
        $suggestions[] = 'block__abrsd_content__user_reset_form';
        break;
      case 'entity.user.edit_form':
        $suggestions[] = 'block__abrsd_content__user_edit_form';
        break;
      case 'entity.node.canonical':
        $node = \Drupal::routeMatch()->getParameter('node');
        if ($node instanceof NodeInterface && $node->getType() === 'page') {
          $suggestions[] = 'block__abrsd_content__basic_page';
        }
        break;
    }
  }
}

/**
 * Implements template_preprocess_block().
 *
 * Provide filtered news items to the block template.
 */
function abrsd_preprocess_block(array &$variables)
{
  if ($variables['elements']['#configuration']['label'] == 'Filtered News List') {
    // Build the News List content block.
    _abrsd_preprocess_block_news($variables);
    // Ensure the News List content block is rebuilt when the topic is changed.
    $variables['#cache']['contexts'][] = 'url.query_args:topic';
  }
  // If we have the login block and the current path is user/login, add a class to the block.
  $user_login = Url::fromRoute('user.login')->toString();
  if ($variables['elements']['#configuration']['id'] == 'system_main_block' && _abrsd_get_current_path() == $user_login) {
    // Get the id of the block with the label = 'Login Image'
    $variables['block_id'] = _abrsd_get_block_id_by_label('Login Image');
  }
}

/**
 * Implements hook_theme_suggestions_container_alter().
 *
 * Adds template suggestions for the container on specific pages.
 *
 * @param array $suggestions
 *   An array of theme suggestions.
 * @param array $variables
 *   An array of variables passed to the theme function.
 */
function abrsd_theme_suggestions_container_alter(array &$suggestions, array &$variables)
{
  // Get the current path
  $current_path = _abrsd_get_current_path();
  // Check if the current path is the user login page
  if ($current_path == '/user/password') {
    // Add template suggestion for the container on the user password reset page
    $suggestions[] = 'container__user_pass_reset';
  }
}

/**
 * Get the block id by label.
 *
 * @param string $label The label of the block to get the id for.
 * @return int The block id.
 */
function _abrsd_get_block_id_by_label(string $label): int
{
  // Get the block id by label
  $query = \Drupal::entityQuery('block_content')->accessCheck(FALSE)
    ->condition('info', $label)
    ->execute();
  // Get the block id
  $block_id = reset($query) ?: 0;
  // Return the block id
  return $block_id;
}

/**
 * Implements template_preprocess_links().
 *
 * Add a variable to the links array if the current node is a blog node.
 */
function abrsd_preprocess_links(array &$variables)
{
  // Is the current node a blog node?
  $is_blog = \Drupal::routeMatch()->getParameter('node')?->getType() === 'blog';
  // Add the is_blog variable to the links array
  $variables['is_blog'] = $is_blog;
  try {
    if ($is_blog && !\Drupal::currentUser()->isAuthenticated()) {
      $args = $variables['links']['comment-forbidden']['text']->getArguments() ?? [];
      $register = $args[':register'] ?? null;
      if (isset($register)) {
        $new_register = _get_path_from_url($register);
        // Only create a new TranslatableMarkup object if the :register argument has changed.
        if ($new_register !== $register) {
          $args[':register'] = $new_register;
          $new_string = $variables['links']['comment-forbidden']['text']->getUntranslatedString();
          $tm = new TranslatableMarkup($new_string, $args);
          $variables['links']['comment-forbidden']['text'] = $tm;
        }
      }
    }
  } catch (Exception $e) {
    \Drupal::logger('abrsd')->error($e->getMessage());
  }
}


/**
 * Removes the query string from a given URL.
 *
 * @param string $url The URL to remove the query string from.
 * @return string The URL without the query string.
 */
function _get_path_from_url(string $url): string
{
  $parsed_url = parse_url($url);
  return $parsed_url['path'];
}

/**
 * Implements template_preprocess_comment().
 *
 * Add variables to the comment template.
 */
function abrsd_preprocess_comment(array &$variables)
{
  try {
    // Get the comment owner (Drupal user object)
    $user = $variables['comment']->getOwner();
    // Check if the user has a profile picture
    $variables['has_picture'] = !$user?->user_picture->isEmpty() ?? FALSE;
    // Get creted date of the comment
    $created = $variables['comment']->getCreatedTime();
    // Format as time ago since the comment was created with granularity of 1 day
    $variables['created_ago'] = \Drupal::service('date.formatter')->formatTimeDiffSince(
      $created,
      ['granularity' => 1]
    );
    // Get the fully loaded user
    $user = User::load($user->id());
    // Get the display name
    $variables['display_name'] = _abrsd_get_display_name($user);
  } catch (Exception $e) {
    \Drupal::logger('abrsd')->error($e->getMessage());
  }
}

/**
 * Retrieves the display name for a user.
 *
 * @param User $user The user object for which to retrieve the display name.
 * @return string The display name of the user.
 */
function _abrsd_get_display_name(User $user): string
{
  $result = $user->field_display_name->value;

  // If user has permission 'administer comments' then set result to 'Moderator'
  if ($user->hasPermission('administer comments')) {
    $result = 'Moderator';
  }

  return $result;
}

/**
 * Provide filtered news items to the block template.
 */
function _abrsd_preprocess_block_news(array &$variables)
{
  // Get the taxonomy term fromm the URL if we are on the news category page
  $topic = _abrsd_get_term_from_url_query('topic');
  // Get the taxonomy term id
  $tid = is_object($topic) ? $topic->id() : 0;
  // Get the view
  $view = Views::getView('news');
  // Set the display
  $view->setDisplay('block_6');
  // Set the arguments
  $view->setArguments([$tid]);
  // Initialize the nodes array
  $variables['nodes'] = [];
  // Get the results
  if ($view->execute() && !empty($view->result)) {
    foreach ($view->result as $result) {
      // Add the node to the variables array
      $variables['nodes'][] = $result->_entity;
      // Get the current node
      $current = end($variables['nodes']);
      // Format $current->changed_at for display as YYYY-MM-DDTHH:MM:SS+00:00 (e.g. 2019-01-01T00:00:00+00:00)
      $current->changed_at = date('c', $current->changed->value);
      // Format $current->changed_at for display as YYYY-MMM-DD (e.g. 2019-Jan-01)
      $current->changed_at = date('Y-M-d', strtotime($current->changed_at));
      // Calculate time ago for a given date
      $current->changed_ago = \Drupal::service('date.formatter')->formatTimeDiffSince(
        $current->changed->value,
        ['granularity' => 1]
      );
      $current->changed_ago .= ' ago';
      // Get the taxonomy term for the news item topic
      $current->topic = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($current->field_topic->target_id);
      $current->tid = $current->topic->id();
      $current->topic_label = $current->topic->label();
    }
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Attaches the flickity library to the front page.
 */
function abrsd_preprocess_page(array &$variables)
{
  $is_front = \Drupal::service('path.matcher')->isFrontPage();
  if ($is_front) {
    // Attach flickty library to the front page
    $variables['#attached']['library'][] = 'abrsd/flickity';
    $variables['#attached']['library'][] = 'abrsd/flickity-front';
  }
}

/**
 * Implements hook_preprocess_menu().
 *
 * Passes the is_logged_in variable to the menu template.
 */
function abrsd_preprocess_menu(array &$variables)
{
  // Check if the user is logged in and pass the variable to the menu template
  $variables['is_logged_in'] = \Drupal::currentUser()->isAuthenticated();
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepares variables for node templates.
 *
 * @param array $variables
 *   An associative array containing:
 *   - node: The node entity being rendered.
 *
 * @see template_preprocess_node()
 */
function abrsd_preprocess_node(array &$variables)
{
  // Get the current node
  $node = $variables['node'];
  //  Check for node of type base_layout_page and title 400 Error and if so call
  // _abrsd_preprocess_node_resource() and return.
  if ($node->getType() == 'base_layout_page' && $node->getTitle() == '400 Error') {
    _abrsd_preprocess_node_resource($variables);
    return;
  }
  // Check for node of type workshop
  _abrsd_preprocess_node_workshop($variables);
  // Check for node of type working_group
  _abrsd_preprocess_node_working_group($variables);
}

/**
 * Implements hook_preprocess_node() helper for working_group nodes.
 *
 * Adds additional variables to the variables array for working_group nodes.
 *
 * @param array $variables
 *   An array of variables to pass to the theme template.
 */
function _abrsd_preprocess_node_working_group(array &$variables)
{
  // Get the current node
  $node = $variables['node'];
  // Get path alias of the current node
  $path_alias = _abrsd_get_current_path();
  // Check if the current path is 'our-work/committees' and the node type is 'resource'
  if (strpos($path_alias, 'our-work/committees') === FALSE && $node->getType() != 'resource') {
    return;
  }
  // Get related committees
  $related_committees = [];
  $related_committees = views_embed_view('working_group_list', 'block_2', $node->id());
  $variables['related_committees'] = $related_committees;
}

/**
 * Implements hook_preprocess_node() helper for workshop nodes.
 *
 * Adds the timezone and referring path or URL to the variables array for workshop nodes.
 *
 * @param array $variables
 *   An array of variables to pass to the theme template.
 */
function _abrsd_preprocess_node_workshop(array &$variables)
{
  // Get the current node
  $node = $variables['node'];
  // Check for node of type workshop
  if ($node->getType() != 'workshop') {
    return;
  }
  // Get the websites timezone
  $timezone = \Drupal::config('system.date')->get('timezone.default');
  // Add the timezone to the list of variables
  $variables['timezone'] = $timezone;
  // Get the referring path or url
  $referer = \Drupal::request()->headers->get('referer');
  // Get path portion of the url
  $referer = parse_url($referer, PHP_URL_PATH);
  // Add the referring path or url to the variables array
  $variables['referer'] = $referer;
}

/**
 * Implements hook_preprocess_breadcrumb().
 *
 * Adds the current node title to the breadcrumb array.
 * @see https://www.drupal.org/node/743366
 *
 * @param array $variables
 *   The variables array passed to the template.
 */
function abrsd_preprocess_breadcrumb(array &$variables)
{
  // if the variables array contains a breadcrumb add the current node title to it
  if (isset($variables['breadcrumb'])) {
    // Get the current node
    $node = \Drupal::routeMatch()->getParameter('node');
    if (!empty($node)) {
      // Get the breadcrumb path
      _breadcrumb_append_path_fragment($variables);
      _breadcrumb_for_node_pages($variables, $node);
      // Make an early return
      return;
    }
    // Get the current taxonomy term
    $term = \Drupal::routeMatch()->getParameter('taxonomy_term');
    if (!empty($term)) {
      // If blog-tag is in the current path, set the pre_path to 'Blog'
      if (strpos(_abrsd_get_current_path(), 'blog-tag') !== FALSE) {
        $pre_path = ['name' => t('Forum'), 'url' => '/forum'];
      }
      // Get the breadcrumb path
      _breadcrumb_for_taxonomy_term_pages($variables, $term, $pre_path);
      // Make an early return
      return;
    }
  }
}

/**
 * Implements hook_breadcrumb_alter().
 *
 * Overrides the default breadcrumb for taxonomy term pages.
 *
 * @param array $variables
 *   An array of variables passed to the theme hook.
 * @param \Drupal\taxonomy\TermInterface $term
 *   The taxonomy term object.
 * @param array|null $pre_path
 *  The path to prepend to the breadcrumb.
 */
function _breadcrumb_for_taxonomy_term_pages(array &$variables, Term $term, ?array $pre_path = [])
{
  // If pre_path is not empty, prepend it to the breadcrumb
  if (!empty($pre_path)) {
    // Create a new translatable markup object from the pre_path
    $new_breadcrumb_title = new TranslatableMarkup('@title', ['@title' => $pre_path['name']]);
    // Add the pre_path to the breadcrumb array
    $variables['breadcrumb'][] = [
      'text' => $new_breadcrumb_title,
      'url' => $pre_path['url'],
      'langcode' => '',
    ];
  }
  // Get the taxonomy term name
  $tname = $term->getName();
  // Create a new translatable markup object from the term name
  $new_breadcrumb_title = new TranslatableMarkup('@title', ['@title' => $tname]);
  // Add the current term name to the breadcrumb array
  $variables['breadcrumb'][] = [
    'text' => $new_breadcrumb_title,
    'url' => '',
    'langcode' => '',
  ];
  // Do not cache the breadcrumb block
  $variables['#cache']['max-age'] = 0;
}

/**
 * Implements hook_preprocess_breadcrumb() helper for node pages.
 *
 * Adds the current node title to the breadcrumb array.
 *
 * @param array $variables
 *   The variables array passed to the template.
 * @param Node $node
 *   The node object.
 */
function _breadcrumb_for_node_pages(array &$variables, Node $node)
{
  // Get the taxonomy term fromm the URL if we are on the news category page
  $topic = _abrsd_get_term_from_url_query('topic');
  // Get the term name from the taxonomy term object
  $tname = is_object($topic) ? $topic->getName() : '';
  //  Initialize field name
  $field_name = 'field_page_title';
  // Check if the field_page_title field exists
  $field = $node->hasField($field_name) ? $node->get($field_name) : NULL;
  // Use the page title field if it exists
  $title = (!empty($field) && !empty($field->value)) ? $field->value : $node->getTitle();
  // Set the field name to field_workshop_title
  $field_name = 'field_committee';
  // Get a reference to the field_workshop_type field (Taxonomy reference field)
  $field = $node->hasField($field_name) ? $node->get($field_name) : NULL;
  // Get the taxonomy term label
  $label = (!empty($field) && !empty($field->entity)) ? '(' . $field->entity->label() . ')' : '';
  // Append the taxonomy term label to the title e.g. Title - (Workshop)
  $title .= !empty($label) ? ' ' . $label : '';
  // Append the topic name to the title e.g. Title - (Workshop) - Topic
  $title .= !empty($tname) ? ' (' . $tname . ')' : '';
  // Create a new translatable markup object from the title
  $markup = new TranslatableMarkup('@title', ['@title' => $title]);
  // Add the current node title to the breadcrumb as translatable markup text
  $variables['breadcrumb'][] = [
    'text' => $markup,
    'url' => '',
    'langcode' => '',
  ];
  // Do not cache the breadcrumb block
  $variables['#cache']['max-age'] = 0;
}

/**
 * Retrieves a taxonomy term object based on the provided term name from the URL query parameters.
 *
 * @param string $term The name of the term to retrieve.
 * @return \Drupal\taxonomy\Entity\TermInterface|null The taxonomy term object, or null if not found.
 */
function _abrsd_get_term_from_url_query(string $term): ?Term
{
  // Get the query parameters
  $query = \Drupal::request()->query->all();
  // Get the topic query parameter
  $tname = $query[$term] ?? '';
  // Sanitize the taxonomy term name
  $tname = Html::escape($tname);
  // Replace dash ('-') with space (' ') in $tname
  $tname = str_replace('-', ' ', $tname);
  // Get the taxonomy term by label
  $term = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['name' => $tname]);
  // Get the taxonomy term object
  $topic = (is_array($term) && !empty($term)) ? reset($term) : null;
  // Get the taxonomy term
  return $topic;
}

/**
 * Helper function for hook_preprocess_breadcrumb().
 *
 * Append the fragment to the breadcrumb path.
 *
 * @param array $variables
 *   An associative array containing:
 *   - breadcrumb: An array of breadcrumb links.
 */
function _breadcrumb_append_path_fragment(array &$variables)
{
  // Get the current node path
  $node_path = _abrsd_get_current_path();
  // Strip the leading slash from the node path
  $node_path = ltrim($node_path, '/');
  // Get the different path segments from the current node path
  $node_path_segments = explode('/', $node_path);
  // Early return if there's only one segment or the path ends with '/list'
  // This is a specific condition to avoid processing certain types of paths such as list paths
  if (count($node_path_segments) == 1 || str_ends_with($node_path, '/list')) {
    return;
  }
  // Set the node path segments to [-1] if it is empty
  if ($node_path_segments === FALSE || empty($node_path_segments)) {
    $node_path_segments = [-1];
  }
  // Search for a match on the path field in the breadcrumb taxonomy
  $result = \Drupal::entityQuery('taxonomy_term')->accessCheck(FALSE)
    ->condition('vid', 'breadcrumb')
    ->condition('field_path', $node_path_segments, 'IN')
    ->sort('field_anchor', 'ASC')
    ->execute();
  // Check that result is not empty
  if (empty($result)) {
    return;
  }
  // Load the taxonomy term
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadMultiple($result);
  // Initialize the breadcrumb path
  $breadcrumb_path = $new_breadcrumb_title = '';
  // Loop through the terms
  foreach ($terms as $term) {
    // Get the path field value
    $path = $term->field_path->value;
    // Get the anchor field value
    $anchor = $term->field_anchor->value;
    // Get the anchor field value
    $anchor_mark = $anchor ? '#' : '';
    // If anchor is true and the fragment field is not empty, set the path to the fragment
    $path = ($anchor) ? $term->field_fragment->value : $path;
    // Get the breadcrumb path
    $breadcrumb_path .= $anchor_mark . $path;
    // If the current term name is not in the breadcrumb array, add it
    if (!in_array($term->name->value, array_column($variables['breadcrumb'], 'text'))) {
      // Create a new translatable markup object from the term name
      $new_breadcrumb_title = new TranslatableMarkup('@title', ['@title' => $term->name->value]);
      // Add the current term name to the breadcrumb array
      $variables['breadcrumb'][] = [
        'text' => $new_breadcrumb_title,
        'url' => '/' . $breadcrumb_path,
        'langcode' => '',
      ];
    }
  }
}

/**
 * Get a resource item from the resource content type.
 *
 * @param array $variables
 *  The variables array passed to the template.
 */
function _abrsd_preprocess_node_resource(array &$variables)
{
  // Get Resource nodes whose titles contain 'Homepage CTA' using the LIKE operator.
  // Example: %Homepage CTA% - sprintf('%%%1$s%%', $title);
  $title = new TranslatableMarkup('%@title%', ['@title' => 'Homepage CTA']);
  $title = $title->render();
  // Get the node ids of the resource nodes
  $result = \Drupal::entityQuery('node')->accessCheck(FALSE)
    ->condition('type', 'resource')
    ->condition('title', $title, 'LIKE')
    ->execute();
  // Set array to [-1] if it is empty
  $result = count($result) ? $result : [-1];
  // Initialize object of type Random/Randomizer
  $random = new Random\Randomizer();
  // Get a random key from the $result array. This is more effficient than using
  // array_rand() since it returns an array [key => value], rather just the
  // random key.
  $arr_nid = $random->pickArrayKeys($result, 1);
  // Get the node array
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadMultiple($arr_nid);
  // Assign the node array to the variables array
  $variables['reco_nodes'] = $nodes ?? [];
  // Prevent the page from being cached.
  $variables['#cache']['max-age'] = 0;
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 *
 * Adds the current node id to the variables array for the 'working_group_list' view.
 *
 * @param array $variables
 *   An associative array of variables for the view.
 */
function abrsd_preprocess_views_view_unformatted(array &$variables)
{
  // Get the id of the current view
  $view_id = $variables['view']?->id();
  // Set the view ids to add the current node id to
  $view_ids = [
    'working_group_list',
    'workshop',
    'blog',
  ];
  // Check if the current view_id is in an array of view ids
  if (in_array($view_id, $view_ids)) {
    // Get the current node id
    $nid = \Drupal::routeMatch()->getParameter('node')?->id();
    // Add the current node id to the variables array
    $variables['nid'] = $nid;
  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 *
 * Adds the current path to the variables array for the 'news_topics' view.
 *
 * @param array $variables
 *   An associative array of variables for the view.
 */
function abrsd_preprocess_views_view_fields(array &$variables)
{
  // Get the id of the current view
  $view_id = $variables['view']?->id();
  switch ($view_id) {
    case 'news_topics':
      // Get the current path
      $variables['current_path'] = _abrsd_get_current_path();
      break;
    case 'blog':
      // Get the nid from the current row
      $node = $variables['row']->_entity;
      // Get the node object using the nid value
      $tags = $node->field_tag;
      $variables['tags'] = [];
      if (!empty($tags)) {
        foreach ($tags as $tag) {
          // Load the referenced entity
          $tag_entity = $tag->entity;
          // Get the value of the referenced entity prepended with a # and suffixed with a space
          $variables['tags'][] = '#' . $tag_entity?->label();
        }
      }
      break;
    default:
      // Default case
      break;
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Attaches the 'status-msg' library to the page if the current path is '/contact-us'.
 *
 * @param array $variables
 *   An associative array of variables to pass to the theme template.
 */
function abrsd_page_attachments_alter(array &$variables)
{
  // Get the current path
  $path_alias = _abrsd_get_current_path();
  // Check if the current path is the contact-us page
  if (!empty($path_alias) && $path_alias == '/contact-us') {
    // Attach the status-msg library
    $variables['#attached']['library'][] = 'abrsd/status-msg';
  }
  // Add the cookie consent library to the page if the user is not logged in
  if (!\Drupal::currentUser()->isAuthenticated()) {
    _abrsd_load_cookie_consent_message($variables);
  }

  $has_admin_role = _abrsd_user_has_admin_role();
  // Add the Google Tag Manager script to the page if the user does not have an admin role
  if (!$has_admin_role) {
    _add_ga_script($variables);
  }
}


/**
 * Checks if the current user has an admin role.
 *
 * This function checks if the current user has any of the following roles:
 * - 'administrator'
 * - 'content_administrator'
 * - 'content_editor'
 * - 'content_moderator'
 * - 'access_administrator'
 *
 * @return bool
 *   Returns TRUE if the current user has an admin role, FALSE otherwise.
 */
function _abrsd_user_has_admin_role(): bool
{
  $roles = ['administrator', 'content_editor', 'content_moderator', 'access_administrator'];
  $user = User::load(\Drupal::currentUser()->id());
  $result = FALSE;
  foreach ($roles as $role) {
    if ($user->hasRole($role)) {
      $result = TRUE;
      break;
    }
  }

  return $result;
}

/**
 * Add Google Tag Manager script to the page.
 *
 * @param array $variables
 *   An associative array of variables to pass to the theme template.
 */
function _add_ga_script(array &$variables)
{
  // Do not add the script if the current user is logged in
  // if (\Drupal::currentUser()->isAuthenticated()) {
  //   return;
  // }
  // Get google_analytics_account from Drupal settings
  $ga_id = Settings::get('google_analytics_account', 'NOT SET');
  // Add Google Analytics external JS script to the page
  $variables['#attached']['html_head'][] = [
    [
      '#tag' => 'script',
      '#attributes' => [
        'type' => 'text/javascript',
        'defer' => 'defer',
        'src' => 'https://www.googletagmanager.com/gtag/js?id=' . $ga_id,
      ],
    ],
    'ga4-script',
  ];
  // Add Google Analytics JS config to the page
  $variables['#attached']['html_head'][] = [
    [
      '#tag' => 'script',
      '#attributes' => [
        'defer' => 'defer',
      ],
      '#value' => "window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', '$ga_id');",
    ],
    'ga4-script-config',
  ];
}

/**
 * Loads the cookie consent message if the user is not logged in.
 *
 * @param array $variables
 *   An array of variables passed by reference.
 */
function _abrsd_load_cookie_consent_message(array &$variables)
{
  // Load the cookie consent message if the user is not logged in

  // Get the Cookie Consent Message node
  $query = \Drupal::entityQuery('node')->accessCheck(FALSE)
    ->condition('status', 1) // Ensure the node is published
    ->condition('type', 'cookie_consent_message') // Specify the bundle
    ->sort('created', 'DESC') // Sort by creation date, most recent first
    ->range(0, 1); // Limit to 1 result
  // Execute the query to get the node IDs
  $nids = $query->execute();
  if (!empty($nids)) {
    // Get the first node from the array
    $nid = reset($nids);
    // Load the full node entity
    $node = Node::load($nid);
    // Serialize node data
    $allowed_tags =  ['a', 'p', 'strong', 'em', 'ul', 'ol', 'li'];
    $node_data = [
      'consent_title' => $node->field_consent_title->value,
      'consent_description' => Xss::filter($node->field_consent_description->value, $allowed_tags),
      'accept_all_button' => $node->field_accept_all_button->value,
      'accept_necessary_button' => $node->field_accept_necessary_button->value,
      'show_preferences_button' => $node->field_show_preferences_button->value,
      'pref_window_title' => $node->field_pref_window_title->value,
      'pref_accept_button' => $node->field_pref_accept_button->value,
      'pref_necessary_button' => $node->field_pref_necessary_button->value,
      'pref_save_current_button' => $node->field_pref_save_current_button->value,
      'pref_intro_title' => $node->field_pref_intro_title->value,
      'pref_intro_description' => $node->field_pref_intro_description->value,
      'pref_strict_title' => $node->field_pref_strict_title->value,
      'pref_strict_description' => Xss::filter($node->field_pref_strict_description->value, $allowed_tags),
      'pref_analytics_title' => $node->field_pref_analytics_title->value,
      'pref_analytics_description' => Xss::filter($node->field_pref_analytics_description->value, $allowed_tags),
      'pref_more_info_title' => $node->field_pref_more_info_title->value,
      'pref_more_info_description' => Xss::filter($node->field_pref_more_info_description->value, $allowed_tags),
      'footer_links' => _get_cookie_consent_links($node),
      'ga_id' => Settings::get('google_analytics_account', 'NOT SET'),
    ];

    // Add the cookie consent configuration script to the page
    $theme_path = Drupal::service('extension.path.resolver')->getPath('theme', 'abrsd');
    // Ensure there is a single leading slash, not two
    $js_path = '/' . ltrim($theme_path, '/');
    // Add the cookie consent configuration script to the page
    // $js_min = \Drupal::config('system.performance')->get('preprocess.js_minified') ? 'min' : 'full';
    $js_min = true ? 'min.' : '';
    $js_path .= "/js/cookieconsent-config.{$js_min}js";
    // Attach the cookie consent configuration script to the page
    $variables['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#attributes' => [
          'type' => 'module',
          'src' => $js_path,
        ],
      ],
      'cookie_consent_cfg',
    ];

    // Serialize the array and save the encoded string to a variable
    $options = JSON_UNESCAPED_SLASHES
      | JSON_UNESCAPED_UNICODE
      | JSON_HEX_TAG
      | JSON_HEX_AMP
      | JSON_HEX_APOS
      | JSON_HEX_QUOT;
    $node_data_jse = json_encode($node_data, $options);
    // Attach the cookie consent data to the page
    $variables['#attached']['html_head'][] = [
      [
        '#type' => 'html_tag',
        '#tag' => 'script',
        '#value' => "window._abrsd_ = window._abrsd_ || {}; window._abrsd_.cookieConsent = $node_data_jse;",
        '#attributes' => ['type' => 'text/javascript'],
      ],
      'cookie_consent',
    ];
  }
}

/**
 * Retrieves the cookie consent links from a given node.
 *
 * @param Node $node
 *   The node entity from which to retrieve the cookie consent links.
 *
 * @return array
 *   An array of links with their URLs, titles, and external status.
 */
function _get_cookie_consent_links(Node $node): array
{
  // Initialize the links array
  $links = [];

  // Check if the field_consent_footer_links field is not empty
  if (!$node->field_consent_footer_links->isEmpty()) {
    foreach ($node->field_consent_footer_links as $item) {
      // Get the URL object.
      $url = $item->getUrl()->toString();
      // Get the link title; default to the URL if the title is empty.
      $title = $item->title ?: t('More info');
      // Optionally, you can check if the link is external.
      $is_external = $item->getUrl()->isExternal();
      // Store or process the link URL and title as needed.
      $links[] = [
        'url' => $url,
        'title' => $title,
        'is_external' => $is_external,
      ];
    }
  }

  return $links;
}

/**
 * Implements hook_preprocess_status_messages().
 *
 * Adds the 'is_contact_page' variable to the status messages template variables array.
 * The variable is set to TRUE if the current path is the contact-us page.
 *
 * @param array $variables
 *   An associative array of variables to pass to the theme template.
 */
function abrsd_preprocess_status_messages(array &$variables)
{
  // Get the current path
  $path = _abrsd_get_current_path();
  // Initialize the is_contact_page variable
  $variables['is_contact_page'] = (!empty($path) && $path == '/contact-us');
  // Is the current user logged in?
  $variables['is_logged_in'] = \Drupal::currentUser()->isAuthenticated();
}


/**
 * Implements hook_preprocess_field().
 *
 * Preprocesses variables for the field template.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: The renderable array representing the field.
 *   - items: An array of field items. Each item contains:
 *     - content: The renderable array representing the field item.
 *
 * @return void
 *   There is no return value for this function.
 */
function abrsd_preprocess_field(&$variables)
{
  // Check that we are processing the 'field_tag' field, and the entity bundler is 'blog',
  // and the view mode is 'full'
  if (
    $variables['element']['#field_name'] == 'field_tag' &&
    $variables['element']['#bundle'] == 'blog' &&
    $variables['element']['#view_mode'] == 'full'
  ) {
    // Add a class to the field_tag field items
    $focus_ring_classes = [
      'd-inline-flex',
      'focus-ring',
      'py-1',
      'px-3',
      'text-decoration-none',
      'border',
      'rounded-2',
      'btn',
      'btn-primary',
      'fw-semibold',
    ];
    foreach ($variables['items'] as &$item) {
      if (isset($item['content']['#url'])) {
        $item['content']['#options']['attributes']['class'] = implode(' ', $focus_ring_classes);
      }
    }
  }
}

/**
 * Returns the current path alias.
 *
 * @return string
 *   The current path alias.
 */
function _abrsd_get_current_path(): string
{
  // Get the current path
  $current_path = \Drupal::service('path.current')->getPath();
  // Get the current path alias
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  // Return the current path alias
  return $current_path_alias;
}
