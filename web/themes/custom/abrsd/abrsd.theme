<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function abrsd_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
}

/**
 * Implements hook_preprocess_html().
 *
 * Add a class to the body based on the path alias of the current node.
 */
function abrsd_preprocess_html(&$variables)
{
  // Add a class to the body based on the path alias of the current node.
  // The node id is contained in the last class in the body classes array.
  $node_class = end($variables['attributes']['class']);
  $node_classes = explode('-', $node_class);
  $nid = end($node_classes);
  if (is_numeric($nid)) {
    // Get the path alias of the current node
    $nid = (int)$nid;
    $node =  \Drupal::service('entity_type.manager')->getStorage('node')->loadMultiple([$nid]);
    $node = reset($node);
    $path_alias = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
    $variables['attributes']['class'][] = 'page-' . str_replace('/', '-', $path_alias);
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * Add a theme suggestion for the page template based on the path alias of the current node.
 */
function abrsd_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  // Get the noide of the current node object
  $node = \Drupal::routeMatch()->getParameter('node');
  // If not a revision, get the node id.
  if (is_object($node)) {
    // Get the path alias of the current node
    $path_alias = Url::fromRoute('entity.node.canonical', ['node' => (int)$node->id()])->toString();
    // Change all - to _ in the path alias and remove the first / from the path alias.
    $path_alias = str_replace(['-', '/'], ['_', ''], $path_alias);
    // Create the new suggestion.
    $new_suggestion = 'page__node__' . $path_alias;
    // Splice the new suggestion into the suggestions array so it is the second suggestion.
    array_splice($suggestions, 1, 0, $new_suggestion);
  }
}
