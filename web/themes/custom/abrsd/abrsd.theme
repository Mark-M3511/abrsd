<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Url;
use \Drupal\views\Entity\View;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function abrsd_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = array(
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  );
}

/**
 * Implements hook_preprocess_html().
 *
 * Add a class to the body based on the path alias of the current node.
 */
function abrsd_preprocess_html(&$variables)
{
  // Add a class to the body based on the path alias of the current node.
  // The node id is contained in the last class in the body classes array.
  $node_class = end($variables['attributes']['class']);
  $node_classes = explode('-', $node_class);
  $nid = end($node_classes);
  if (is_numeric($nid)) {
    // Get the path alias of the current node
    $nid = (int)$nid;
    $node =  \Drupal::service('entity_type.manager')->getStorage('node')->loadMultiple([$nid]);
    $node = reset($node);
    $path_alias = Url::fromRoute('entity.node.canonical', ['node' => $nid])->toString();
    $variables['attributes']['class'][] = 'page-' . str_replace('/', '-', $path_alias);
  }
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * Add a theme suggestion for the page template based on the path alias of the current node.
 */
function abrsd_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  // Get the noide of the current node object
  $node = \Drupal::routeMatch()->getParameter('node');
  // If not a revision, get the node id.
  if (is_object($node)) {
    // Get the path alias of the current node
    $path_alias = Url::fromRoute('entity.node.canonical', ['node' => (int)$node->id()])->toString();
    // Change all - to _ in the path alias and remove the first / from the path alias.
    $path_alias = str_replace(['-', '/'], ['_', ''], $path_alias);
    // Create the new suggestion.
    $new_suggestion = 'page__node__' . $path_alias;
    // Splice the new suggestion into the suggestions array so it is the second suggestion.
    array_splice($suggestions, 1, 0, $new_suggestion);
  }
}

/**
 * Implements hook_theme_suggestions_node_alter().
 *
 * Add a theme suggestion for the node template based on the path alias of the current node.
 */
function abrsd_theme_suggestions_node_alter(array &$suggestions, array $variables)
{
  // Get the noide of the current node object
  $node = isset($variables['elements']['#node'])
    ? $variables['elements']['#node']
    : \Drupal::routeMatch()->getParameter('node');
  // If not a revision, get the node id.
  if (is_object($node)) {
    // Get the path alias of the current node
    $path_alias = Url::fromRoute('entity.node.canonical', ['node' => (int)$node->id()])->toString();
    // Change all - to _ in the path alias and remove the first / from the path alias.
    $path_alias = str_replace(['-', '/'], ['_', ''], $path_alias);
    // Create the new suggestion.
    $new_suggestion = 'node__' . $path_alias . '__full';
    // Splice the new suggestion into the suggestions array so it is the second suggestion.
    array_splice($suggestions, 3, 0, $new_suggestion);
  }
}

/**
 * Implements template_preprocess_block().
 *
 * Provide filtered news items to the block template.
 */
function abrsd_preprocess_block(&$variables)
{
  if ($variables['plugin_id'] == 'block_content:80e4ec90-a2e5-4760-b2e0-fb760bc393fe') {
    _abrsd_preprocess_block_news($variables);
  }
}

/**
 * Provide filtered news items to the block template.
 */
function _abrsd_preprocess_block_news(&$variables)
{
  //  Get a view by machine name
  $view = \Drupal::entityTypeManager()->getStorage('view')->load('news');
  // Get the query parameters
  $query = \Drupal::request()->query->all();
  // Get the query paramter for the topic
  $topic = isset($query['topic']) ? $query['topic'] : '';
  // Get the taonomy term id for the topic
  $tid = \Drupal::entityQuery('taxonomy_term')
    ->condition('name', $topic)
    ->accessCheck(FALSE)
    ->execute();
  // Get executable view
  $executable_view = $view->getExecutable();
  // Get the display
  $executable_view->setDisplay('block_6');
  // Set the arguments
  if (!empty($tid)) {
    $executable_view->setArguments([reset($tid)]);
  }
  // Execute the view
  $executed = $executable_view->execute();
  // Get the results
  if ($executed && !empty($executable_view->result)) {
    foreach ($executable_view->result as $result) {
      $variables['nodes'][] = $result->_entity;
      $current = end($variables['nodes']);
      $current->changed_at = date('c', $current->changed->value);
      // Calculate time ago for a given date
      $current->changed_ago = \Drupal::service('date.formatter')->formatTimeDiffSince(
        $current->changed->value,
        ['granularity' => 1]
      );
      $current->changed_ago .= ' ago';
      // Get the taxonomy term for the news item topic
      $current->topic = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($current->field_topic->target_id);
      $current->tid = $current->topic->id();
      $current->topic_label = $current->topic->label();
    }
  }
  // Ensure the current block is rebuilt when the topic is changed.
  $variables['#cache']['contexts'][] = 'url.query_args:topic';
}
