<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Url;
use \Drupal\views\Views;
use \Drupal\Component\Utility\Html;
use \Drupal\Core\StringTranslation\TranslatableMarkup;
use \Drupal\Core\Site\Settings;
use \Drupal\node\NodeInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 */
function abrsd_form_system_theme_settings_alter(&$form, FormStateInterface $form_state)
{
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
}

/**
 * Implements hook_preprocess_html().
 *
 * Add a class to the body based on the path alias of the current node.
 */
function abrsd_preprocess_html(array &$variables)
{
  // Add a class to the body based on the path alias of the current node.
  $path_alias = _abrsd_get_current_path();
  $variables['attributes']['class'][] = 'page-' . str_replace('/', '-', $path_alias);
}

/**
 * Implements hook_theme_suggestions_page_alter().
 *
 * Add a theme suggestion for the page template based on the path alias of the current node.
 */
function abrsd_theme_suggestions_page_alter(array &$suggestions, array $variables)
{
  // Get the path alias of the current node
  $path_alias = _abrsd_get_current_path();
  // Remove the first / from the path alias.
  $path_alias = ltrim($path_alias, '/');
  // Change all - to _ in the path alias
  $path_alias = str_replace(['-', '/'], ['_', '__'], $path_alias);
  // Create the new suggestion.
  $new_suggestion = 'page__node__' . $path_alias;
  // Splice the new suggestion into the suggestions array so it is the second suggestion.
  array_splice($suggestions, 1, 0, $new_suggestion);
}

/**
 * Implements hook_theme_suggestions_node_alter().
 *
 * Add a theme suggestion for the node template based on the path alias of the current node.
 */
function abrsd_theme_suggestions_node_alter(array &$suggestions, array $variables)
{
  $node = $variables['elements']['#node'] ?? \Drupal::routeMatch()->getParameter('node');

  // Check if $node is an object
  if (is_object($node)) {
    // Get the path alias of the current node
    $path_alias = ltrim(Url::fromRoute('entity.node.canonical', ['node' => $node->id()])->toString(), '/');
    // Replace '-' and '/' with '_' and '__' respectively in the path alias
    $path_alias = str_replace(['-', '/'], ['_', '__'], $path_alias);

    // Split the path alias into parts
    $path_parts = explode('__', $path_alias);
    // Iterate through the path parts
    while (!empty($path_parts)) {
      // Create a new suggestion for the node template
      $new_suggestion = 'node__' . implode('__', $path_parts) . '__full';
      // Insert the new suggestion into the suggestions array at index 3
      array_splice($suggestions, 3, 0, $new_suggestion);
      // Remove the last path part
      array_pop($path_parts);
    }
  }
}

/**
 * Implements template_preprocess_block().
 *
 * Provide filtered news items to the block template.
 */
function abrsd_preprocess_block(array &$variables)
{
  if ($variables['elements']['#configuration']['label'] == 'Filtered News List') {
    // Build the News List content block.
    _abrsd_preprocess_block_news($variables);
    // Ensure the News List content block is rebuilt when the topic is changed.
    $variables['#cache']['contexts'][] = 'url.query_args:topic';
  }
}

/**
 * Provide filtered news items to the block template.
 */
function _abrsd_preprocess_block_news(array &$variables)
{
  // Get the taxonomy term fromm the URL if we are on the news category page
  $topic = _abrsd_get_term_from_url_query('topic');
  // Get the taxonomy term id
  $tid = is_object($topic) ? $topic->id() : 0;
  // Get the view
  $view = Views::getView('news');
  // Set the display
  $view->setDisplay('block_6');
  // Set the arguments
  $view->setArguments([$tid]);
  // Initialize the nodes array
  $variables['nodes'] = [];
  // Get the results
  if ($view->execute() && !empty($view->result)) {
    foreach ($view->result as $result) {
      // Add the node to the variables array
      $variables['nodes'][] = $result->_entity;
      // Get the current node
      $current = end($variables['nodes']);
      // Format $current->changed_at for display as YYYY-MM-DDTHH:MM:SS+00:00 (e.g. 2019-01-01T00:00:00+00:00)
      $current->changed_at = date('c', $current->changed->value);
      // Format $current->changed_at for display as YYYY-MMM-DD (e.g. 2019-Jan-01)
      $current->changed_at = date('Y-M-d', strtotime($current->changed_at));
      // Calculate time ago for a given date
      $current->changed_ago = \Drupal::service('date.formatter')->formatTimeDiffSince(
        $current->changed->value,
        ['granularity' => 1]
      );
      $current->changed_ago .= ' ago';
      // Get the taxonomy term for the news item topic
      $current->topic = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->load($current->field_topic->target_id);
      $current->tid = $current->topic->id();
      $current->topic_label = $current->topic->label();
    }
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Attaches the flickity library to the front page.
 */
function abrsd_preprocess_page(array &$variables)
{
   $is_front = \Drupal::service('path.matcher')->isFrontPage();
   if ($is_front) {
    //  attach flickty library to the front page
    $variables['#attached']['library'][] = 'abrsd/flickity';
   }
}

/**
 * Implements hook_preprocess_node().
 *
 * Prepares variables for node templates.
 *
 * @param array $variables
 *   An associative array containing:
 *   - node: The node entity being rendered.
 *
 * @see template_preprocess_node()
 */
function abrsd_preprocess_node(array &$variables)
{
  // Get the current node
  $node = $variables['node'];
  //  Check for node of type base_layout_page and title 400 Error and if so call
  // _abrsd_preprocess_node_resource() and return.
  if ($node->getType() == 'base_layout_page' && $node->getTitle() == '400 Error') {
    _abrsd_preprocess_node_resource($variables);
    return;
  }
  // Check for node of type workshop
  _abrsd_preprocess_node_workshop($variables);
  // Check for node of type working_group
  _abrsd_preprocess_node_working_group($variables);
}

/**
 * Implements hook_preprocess_node() helper for working_group nodes.
 *
 * Adds additional variables to the variables array for working_group nodes.
 *
 * @param array $variables
 *   An array of variables to pass to the theme template.
 */
function _abrsd_preprocess_node_working_group(array &$variables)
{
  // Get the current node
  $node = $variables['node'];
  // Get path alias of the current node
  $path_alias = _abrsd_get_current_path();
  // Check if the current path is 'our-work/committees' and the node type is 'resource'
  if (strpos($path_alias, 'our-work/committees') === FALSE && $node->getType() != 'resource') {
    return;
  }
  // Get related committees
  $related_committees = [];
  $related_committees = views_embed_view('working_group_list', 'block_2', $node->id());
  $variables['related_committees'] = $related_committees;
}

/**
 * Implements hook_preprocess_node() helper for workshop nodes.
 *
 * Adds the timezone and referring path or URL to the variables array for workshop nodes.
 *
 * @param array $variables
 *   An array of variables to pass to the theme template.
 */
function _abrsd_preprocess_node_workshop(array &$variables)
{
  // Get the current node
  $node = $variables['node'];
  // Check for node of type workshop
  if ($node->getType() != 'workshop') {
    return;
  }
  // Get the websites timezone
  $timezone = \Drupal::config('system.date')->get('timezone.default');
  // Add the timezone to the list of variables
  $variables['timezone'] = $timezone;
  // Get the referring path or url
  $referer = \Drupal::request()->headers->get('referer');
  // Get path portion of the url
  $referer = parse_url($referer, PHP_URL_PATH);
  // Add the referring path or url to the variables array
  $variables['referer'] = $referer;
}

/**
 * Implements hook_preprocess_breadcrumb().
 *
 * Adds the current node title to the breadcrumb array.
 * @see https://www.drupal.org/node/743366
 *
 * @param array $variables
 *   The variables array passed to the template.
 */
function abrsd_preprocess_breadcrumb(array &$variables)
{
  // Get the current node
  $node = \Drupal::routeMatch()->getParameter('node');
  // if the variables array contains a breadcrumb add the current node title to it
  if (isset($variables['breadcrumb']) && !empty($node)) {
    // Get the breadcrumb path
    _breadcrumb_append_path_fragment($variables);
    // Get the taxonomy term fromm the URL if we are on the news category page
    $topic = _abrsd_get_term_from_url_query('topic');
    // Get the term name from the taxonomy term object
    $tname = is_object($topic) ? $topic->getName() : '';
    //  Initialize field name
    $field_name = 'field_page_title';
    // Check if the field_page_title field exists
    $field = $node->hasField($field_name) ? $node->get($field_name) : NULL;
    // Use the page title field if it exists
    $title = (!empty($field) && !empty($field->value)) ? $field->value : $node->getTitle();
    // Set the field name to field_workshop_title
    $field_name = 'field_committee';
    // Get a reference to the field_workshop_type field (Taxonomy reference field)
    $field = $node->hasField($field_name) ? $node->get($field_name) : NULL;
    // Get the taxonomy term label
    $label = (!empty($field) && !empty($field->entity)) ? '(' . $field->entity->label() . ')' : '';
    // Append the taxonomy term label to the title e.g. Title - (Workshop)
    $title .= !empty($label) ? ' ' . $label : '';
    // Append the topic name to the title e.g. Title - (Workshop) - Topic
    $title .= !empty($tname) ? ' (' . $tname . ')' : '';
    // Create a new translatable markup object from the title
    $markup = new TranslatableMarkup('@title', ['@title' => $title]);
    // Add the current node title to the breadcrumb as translatable markup text
    $variables['breadcrumb'][] = [
      'text' => $markup,
      'url' => '',
      'langcode' => '',
    ];
    // Do not cache the breadcrumb block
    $variables['#cache']['max-age'] = 0;
  }
}

/**
 * Retrieves a taxonomy term object based on the provided term name from the URL query parameters.
 *
 * @param string $term The name of the term to retrieve.
 * @return \Drupal\taxonomy\Entity\TermInterface|null The taxonomy term object, or null if not found.
 */
function _abrsd_get_term_from_url_query(string $term)
{
  // Get the query parameters
  $query = \Drupal::request()->query->all();
  // Get the topic query parameter
  $tname = isset($query[$term]) ? $query[$term] : '';
  // Sanitize the taxonomy term name
  $tname = Html::escape($tname);
  // Replace dash ('-') with space (' ') in $tname
  $tname = str_replace('-', ' ', $tname);
  // Get the taxonomy term by label
  $term = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['name' => $tname]);
  // Get the taxonomy term object
  $topic = is_array($term) ? reset($term) : null;
  // Get the taxonomy term
  return $topic;
}

/**
 * Helper function for hook_preprocess_breadcrumb().
 *
 * Append the fragment to the breadcrumb path.
 *
 * @param array $variables
 *   An associative array containing:
 *   - breadcrumb: An array of breadcrumb links.
 */
function _breadcrumb_append_path_fragment(array &$variables)
{
  // Get the current node path
  $node_path = _abrsd_get_current_path();
  // Strip the leading slash from the node path
  $node_path = ltrim($node_path, '/');
  // Get the different path segments from the current node path
  $node_path_segments = explode('/', $node_path);
  // Set the node path segments to [-1] if it is empty
  $node_path_segments = is_array($node_path_segments) ? $node_path_segments : [-1];
  // Search for a match on the path field in the breadcrumb taxonomy
  $result = \Drupal::entityQuery('taxonomy_term')->accessCheck(FALSE)
    ->condition('vid', 'breadcrumb')
    ->condition('field_path', $node_path_segments, 'IN')
    ->sort('field_anchor', 'ASC')
    ->execute();
  // Check that result is not empty
  if (empty($result)) {
    return;
  }
  // Load the taxonomy term
  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadMultiple($result);
  // Initialize the breadcrumb path
  $breadcrumb_path = $target_path = $new_breadcrumb_title = '';
  // Loop through the terms
  foreach ($terms as $term) {
    // Get the path field value
    $path = $term->field_path->value;
    // Get the anchor field value
    $anchor = $term->field_anchor->value;
    // Get the anchor field value
    $anchor = $anchor ? '#' : '';
    // Set the target path
    $target_path = empty($anchor) ? '/' . $path : $target_path;
    // If anchor is true and the fragment field is not empty, set the path to the fragment
    $path = ($anchor && $term->field_fragment->value) ? $term->field_fragment->value : $path;
    // Get the breadcrumb path
    $breadcrumb_path .= $anchor . $path;
    // If the current term name is not in the breadcrumb array, add it
    if (!in_array($term->name->value, array_column($variables['breadcrumb'], 'text'))) {
      // Create a new translatable markup object from the term name
      $new_breadcrumb_title = new TranslatableMarkup('@title', ['@title' => $term->name->value]);
      // Add the current term name to the breadcrumb array
      $variables['breadcrumb'][] = [
        'text' => $new_breadcrumb_title,
        'url' => '/' . $breadcrumb_path,
        'langcode' => '',
      ];
    }
  }
}

/**
 * Get a resource item from the resource content type.
 *
 * @param array $variables
 *  The variables array passed to the template.
 */
function _abrsd_preprocess_node_resource(array &$variables)
{
  // Get Resource nodes whose titles contain 'Homepage CTA' using the LIKE operator.
  // Example: %Homepage CTA% - sprintf('%%%1$s%%', $title);
  $title = new TranslatableMarkup('%@title%', ['@title' => 'Homepage CTA']);
  $title = $title->render();
  // Get the node ids of the resource nodes
  $result = \Drupal::entityQuery('node')->accessCheck(FALSE)
    ->condition('type', 'resource')
    ->condition('title', $title, 'LIKE')
    ->execute();
  // Set array to [-1] if it is empty
  $result = count($result) ? $result : [-1];
  // Initialize object of type Random/Randomizer
  $random = new Random\Randomizer();
  // Get a random key from the $result array. This is more effficient than using
  // array_rand() since it returns an array [key => value], rather just the
  // random key.
  $arr_nid = $random->pickArrayKeys($result, 1);
  // Get the node array
  $nodes = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->loadMultiple($arr_nid);
  // Assign the node array to the variables array
  $variables['reco_nodes'] = $nodes ?? [];
  // Prevent the page from being cached.
  $variables['#cache']['max-age'] = 0;
}

/**
 * Implements hook_preprocess_views_view_unformatted().
 *
 * Adds the current node id to the variables array for the 'working_group_list' view.
 *
 * @param array $variables
 *   An associative array of variables for the view.
 */
function abrsd_preprocess_views_view_unformatted(array &$variables)
{
  // Get the id of the current view
  $view_id = !empty($variables['view']) ? $variables['view']->id() : NULL;
  // Set the view ids to add the current node id to
  $view_ids = [
    'working_group_list',
    'workshop',
  ];
  // Check if the current view_id is in an array of view ids
  if (in_array($view_id, $view_ids)) {
    // Get the current node id
    $node = \Drupal::routeMatch()->getParameter('node');
    $nid = ($node instanceof NodeInterface) ? $node->id() : NULL;
    // Add the current node id to the variables array
    $variables['nid'] = $nid;
  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 *
 * Adds the current path to the variables array for the 'news_topics' view.
 *
 * @param array $variables
 *   An associative array of variables for the view.
 */
function abrsd_preprocess_views_view_fields(array &$variables)
{
  // Get the id of the current view
  $view_id = !empty($variables['view']) ? $variables['view']->id() : NULL;
  // Set the view ids to add the current node id to
  $view_ids = [
    'news_topics',
  ];
  // Check if the current view_id is in an array of view ids
  if (in_array($view_id, $view_ids)) {
    // Get the current path
    $variables['current_path'] = _abrsd_get_current_path();
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Attaches the 'status-msg' library to the page if the current path is '/contact-us'.
 *
 * @param array $variables
 *   An associative array of variables to pass to the theme template.
 */
function abrsd_page_attachments_alter(array &$variables)
{
  // Get the current path
  $path_alias = _abrsd_get_current_path();
  // Check if the current path is the contact-us page
  if (!empty($path_alias) && $path_alias == '/contact-us') {
    // Attach the status-msg library
    $variables['#attached']['library'][] = 'abrsd/status-msg';
  }
  // Add Google Tag Manager script to the page
  _add_ga_script($variables);
}

/**
 * Add Google Tag Manager script to the page.
 *
 * @param array $variables
 *   An associative array of variables to pass to the theme template.
 */
function _add_ga_script(array &$variables)
{
  // Do not add the script if the current user is logged in
  // if (\Drupal::currentUser()->isAuthenticated()) {
  //   return;
  // }
  // Get google_analytics_account from Drupal settings
  $ga_id = Settings::get('google_analytics_account', 'NOT SET');
  // Add Google Analytics external JS script to the page
  $variables['#attached']['html_head'][] = [
    [
      '#tag' => 'script',
      '#attributes' => [
        'type' => 'text/javascript',
        'async' => 'async',
        'src' => 'https://www.googletagmanager.com/gtag/js?id=' . $ga_id,
      ],
    ],
    'ga4-script',
  ];
  // Add Google Analytics JS config to the page
  $variables['#attached']['html_head'][] = [
    [
      '#tag' => 'script',
      '#attributes' => [
        'type' => 'text/javascript',
      ],
      '#value' => "window.dataLayer = window.dataLayer || [];
      function gtag(){dataLayer.push(arguments);}
      gtag('js', new Date());
      gtag('config', '$ga_id');",
    ],
    'ga4-script-config',
  ];
}


/**
 * Implements hook_preprocess_status_messages().
 *
 * Adds the 'is_contact_page' variable to the status messages template variables array.
 * The variable is set to TRUE if the current path is the contact-us page.
 *
 * @param array $variables
 *   An associative array of variables to pass to the theme template.
 */
function abrsd_preprocess_status_messages(array &$variables)
{
  // Get the current path
  $path = _abrsd_get_current_path();
  // Initialize the is_contact_page variable
  $variables['is_contact_page'] = (!empty($path) && $path == '/contact-us');
  // Is the current user logged in?
  $variables['is_logged_in'] = \Drupal::currentUser()->isAuthenticated();
}


/**
 * Returns the current path alias.
 *
 * @return string
 *   The current path alias.
 */
function _abrsd_get_current_path()
{
  // Get the current path
  $current_path = \Drupal::service('path.current')->getPath();
  // Get the current path alias
  $current_path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  // Return the current path alias
  return $current_path_alias;
}
