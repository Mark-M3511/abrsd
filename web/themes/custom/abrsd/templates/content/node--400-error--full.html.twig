{#
/**
 * @file
 * Bootstrap Barrio's theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
     Only "getter" methods (method names starting with "get", "has", or "is")
     and a few common methods such as "id" and "label" are available. Calling
     other methods (such as node.delete) will result in an exception.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 * Custom variables:
 * - reco_nodes: The array of recommended nodes
 * @see template_preprocess_node()
 */
#}
{{ attach_library('bootstrap_barrio/node') }}

{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    'clearfix',
    'node--full-secondary',
    'p-2',
    'p-md-5',
  ]
%}
{# Set up variables #}
{% set page_title = content.field_page_title|render|striptags|raw %}
{% set title = label|render|striptags|raw %}
<article{{attributes.addClass(classes)}}>
	<header>
	  <div>
	 	<h2{{title_attributes.addClass('node__title', 'sr-only')}}>
			{{ page_title ? page_title : title }}
		</h2>
        <div>
          {{ node.body.summary }}
        </div>
	  </div>
	  {% if display_submitted %}
	  	<div class="node__meta">
	  		{{ author_picture }}
	  		{% block submitted %}
	  			<em{{author_attributes}}>
	  				{% trans %}
					Submitted by
	  				{{ author_name }}
	  				on
	  				{{ date }}{% endtrans %}
	  			</em>
	  		{% endblock %}
	  		{{ metadata }}
	  	</div>
	  {% endif %}
	</header>
	<div{{content_attributes.addClass('node__content','clearfix')}}>
      <div class='row'>
		<div class="col-12">
		    <div class="ms-3">
			   <h3 class="oops text-center">Oops!</h3>
			</div>
		</div>
		<div class="col-12">
		    <div class="ms-3 mb-4">
			   <p class="error-message text-center">{{ 'The page you are looking for cannot be found or you do not have access.'|t }}</p>
			   <p class="error-message text-center">{{ 'Check out this recommended content.'|t }}</p>
		    </div>
        </div>
		<div class="col-12">
		   {% for node in reco_nodes %}
			 {# {% set the_url = path('entity.node.canonical', {'node': node.nid.value } ) %} #}
			 {% set ref_nid = node.field_resource_link.0.uri|split('/')[1]  %}
			 {% set the_url = path('entity.node.canonical', {'node': ref_nid} ) %}
			 {# {{ dump(the_url) }} #}
			 {% set the_title = node.field_page_title.value ? node.field_page_title.value : node.title.value %}
			 {% set image_url = file_url(node.field_hero_image.entity.uri.value) %}
			 <a href="{{ the_url }}" class="reco-url d-flex flex-column justify-content-center w-50 mx-auto">
		       <h3 class="reco-title text-center">{{ the_title }}</h3>
		       <img src="{{ image_url }}" class="img-fluid reco_img" alt="Recommended content hero image">
		     </a>
		   {% endfor %}
		</div>
		<div class="col-12">
		   {{ drupal_view('workshop', 'block_4') }}
		</div>
	  </div>
	</div>
</article>
